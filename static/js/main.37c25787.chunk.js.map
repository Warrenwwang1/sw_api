{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","title","possibilities","suggestions","count","questions","searchAttributes","answer","films","next","search","bind","assertThisInitialized","event","key","i","found","numPoss","length","poss","filteredPoss","console","log","att","j","setState","target","value","name","map","x","fetch","response","json","results","filter","y","hair_color","react_default","a","createElement","className","placeholder","onKeyPress","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c25787.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      title: \"\",\n      possibilities: [],\n      suggestions: [],\n      count: 0,\n      questions: [\"What is your hair color?\", \"what is your eye color?\", \"height? (in cm)\", \"mass? (in kg)\"],\n      searchAttributes: [\"hair_color\", \"eye_color\", \"height\", \"weight\"],\n      answer: \"\",\n      films: [],\n      next: null\n    };\n\n    this.search = this.search.bind(this);\n\n\n  }\n\n  search(event) {\n    if (event.key == \"Enter\") {\n      let i;\n      let found = false;\n      let numPoss = this.state.possibilities.length;\n      let poss = this.state.possibilities;\n      let filteredPoss = [];\n\n\n      console.log(\"count is at \" +this.state.count)\n      console.log(\"ATTRIBUTES\" + this.state.searchAttributes);\n      console.log(\"numPoss\" + numPoss);\n\n      let att = this.state.searchAttributes[this.state.count];\n\n      let j = 0;\n\n      this.setState({\n        possibilities: []\n      })\n\n      for (i = 0; i <numPoss; i ++) {\n        console.log(\"LAST POS\" + poss[i][att]);\n        if (event.target.value === poss[i][att]) {\n          found = true;\n          filteredPoss[j] = poss[i];\n          console.log(\"just added \" + poss[i].name + \" to possibilities and filtered now looks like \" + filteredPoss.map(x => x.name));\n          j = j+1\n       \n        }\n      } \n      console.log(\"FINAL FILTERED \" + filteredPoss.map(x => x.name));\n\n\n    if(!found) {\n      console.log(\"Could not find \" + event.target.value);\n      \n      return;\n    }\n    console.log(filteredPoss);\n\n    this.setState({\n      possibilities: filteredPoss,\n\n\n    });\n    if (filteredPoss.length == 1) {\n      this.setState({\n        title: filteredPoss[0].name\n      });\n    }\n\n\n\n    this.setState({\n      \n      count: this.state.count + 1\n\n    });\n\n    // let z;\n    // for(z = 0; z <= filteredPoss.length; z ++) {\n    //   this.state.possibilities[z] = filteredPoss[z];\n    // }\n    console.log(\"poss should be filtered: \" + this.state.possibilities);\n\n   \n    console.log(\"FINAL POSS \" + this.state.possibilities);\n    console.log(this.state.possibilities.length + \" possibilites left: \" + this.state.possibilities.map(x => x.name));\n\n\n    if (this.state.possibilities.length == 1) {\n      this.setState({\n        title: this.state.possibilities[0].name\n      })\n      return;\n\n    }\n\n\n  }\n}\n\n\n\n  async componentDidMount() {\n    const response = await fetch('https://swapi.co/api/people/');\n    const json = await response.json();  \n    this.setState({\n       title: \"Your Star Wars Doppelganger is...\",\n       data: json.results,\n       next: json.next,\n       possibilities:json.results,\n       suggestions: (json.results.filter(y => !(y == \"n/a\"))).map(x => x.hair_color)\n      });\n  }f\n\n  render() {\n    return (\n      <div className=\"everything\">\n        {/* <div className = \"title\"> */}\n          <h className = \"title\" >{this.state.title}</h>\n        {/* </div> */}\n        <p className = \"question\" >{this.state.questions[this.state.count]}</p>\n\n        <input className = \"input_field\" placeholder= {this.state.suggestions} onKeyPress = {this.search}/>\n\n      {console.log(this.state.possibilities)}\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}